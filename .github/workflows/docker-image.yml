name: Build and Push Docker Image

on:
  push:
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "example/**"
      - "docker-compose.example.yml"
      - "config.example.toml"
    branches:
      - master
  pull_request:
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "example/**"
      - "docker-compose.example.yml"
      - "config.example.toml"
    branches:
      - master

env:
  image_name: simple-telegram-notification-bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner}}
          password: ${{ secrets.GHCR_PUSH_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }}:latest

      - name: Telegram notification
        uses: nerdneilsfield/action-simple-telegram-notification-bot@master
        with:
          text: "Your ${{github.repository}} image has no updated to update"
          push_success: true
        env:
          BOT_URL: ${{ secrets.BOT_URL }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

  # build-and-release:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Out Code
  #       uses: actions/checkout@v4

  #     - name: Set Up Golang
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ">=1.21.4"
  #     - name: Build go binary
  #       run: |
  #         go mod download
  #         mkdir releases
  #         CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -tags 'netgo osusergo' -ldflags '-extldflags "-static"' -o releases/simple-telegram-notification-bot_amd64_linux ./server.go
  #         tar czf releases/simple-telegram-notification-bot_amd64_linux.tar.gz -C releases simple-telegram-notification-bot_amd64_linux
  #         CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -tags 'netgo osusergo' -ldflags '-extldflags "-static"' -o releases/simple-telegram-notification-bot_arm64_linux ./server.go
  #         tar czf releases/simple-telegram-notification-bot_arm64_linux.tar.gz -C releases simple-telegram-notification-bot_arm64_linux
  #         CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -tags 'netgo osusergo' -ldflags '-extldflags "-static"' -o releases/simple-telegram-notification-bot_amd64_linux ./server.go
  #         tar czf releases/simple-telegram-notification-bot_amd64_linux.tar.gz -C releases simple-telegram-notification-bot_amd64_linux
  #         CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -tags 'netgo osusergo' -ldflags '-extldflags "-static"' -o releases/simple-telegram-notification-bot_amd64_linux ./server.go
  #         tar czf releases/simple-telegram-notification-bot_amd64_linux.tar.gz -C releases simple-telegram-notification-bot_amd64_linux